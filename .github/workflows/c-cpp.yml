name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-os-boost:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies (ubuntu)
      run: sudo apt-get install -y bzip2 libboost-system-dev libboost-filesystem-dev libboost-iostreams-dev libboost-thread-dev libboost-serialization-dev libboost-program-options-dev
      if: matrix.os == 'ubuntu-latest'
    - name: Install dependencies (macos)
      run: |
        brew update
        brew install boost automake libtool
        echo "CPATH=$CPATH:$(brew --prefix)/include" >> "$GITHUB_ENV" &&
        echo "LIBRARY_PATH=$LIBRARY_PATH:$(brew --prefix)/lib" >> "$GITHUB_ENV"
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(brew --prefix)/lib" >> "$GITHUB_ENV"
      if: matrix.os == 'macos-latest'
    - name: Prepare
      run: autoreconf --install
    - name: Configure
      run: ./configure
    - name: Log config.log
      run: cat config.log
      if: always()
    - name: make
      run: make
    - name: make check
      run: make check

  build-local-boost:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: boost_*.tar.gz
        key: ${{ matrix.os }}
    - name: Install dependencies (macos)
      run: |
        brew update
        brew install automake libtool zlib bzip2
        echo "CPATH=$CPATH:$(brew --prefix)/include" >> "$GITHUB_ENV" &&
        echo "LIBRARY_PATH=$LIBRARY_PATH:$(brew --prefix)/lib" >> "$GITHUB_ENV"
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(brew --prefix)/lib" >> "$GITHUB_ENV"
      if: matrix.os == 'macos-latest'
    - name: Build
      run: ./build.sh
    - name: Log boost.log
      run: cat boost.log
      if: always()
    - name: Log config.log
      run: cat config.log
      if: always()
